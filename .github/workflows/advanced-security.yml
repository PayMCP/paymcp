name: Additional Security Checks

on:
  push:
    branches: [main, master, develop, 'feat/**']
  pull_request:
    branches: [main, master, develop]
  schedule:
    # Run weekly additional security scans
    - cron: '0 4 * * 1'

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  compliance-scan:
    name: Compliance Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Run compliance scanner
      continue-on-error: true
      run: |
        echo "Starting compliance scanner..."
        if [ -f ".github/scripts/compliance-scan.py" ]; then
          python .github/scripts/compliance-scan.py || echo "Compliance scan completed with warnings"
        else
          echo "Compliance scanner not found, creating empty results"
          echo '{"summary":{"secrets_found":0,"payment_issues":0,"dependency_checks":0,"high_severity":0},"secrets":[],"payment_data":[],"dependencies":[]}' > compliance-scan-results.json
        fi
        echo "Compliance scan step completed"

    - name: Upload compliance scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: compliance-scan-${{ github.sha }}
        path: compliance-scan-results.json
        retention-days: 30

  pci-compliance-check:
    name: Payment Security Check
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Payment data security assessment
      run: |
        echo "=== Payment Security Assessment ===" > pci-compliance-report.txt
        echo "Checking for payment data security best practices..." >> pci-compliance-report.txt
        echo "" >> pci-compliance-report.txt

        # Check for hardcoded payment data patterns (exclude test files)
        echo "🔍 Scanning for hardcoded payment data..." >> pci-compliance-report.txt
        if grep -r -i -E "(4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|3[0-9]{13}|6(?:011|5[0-9]{2})[0-9]{12})" src/ --exclude-dir=tests --exclude-dir=test 2>/dev/null; then
          echo "❌ POTENTIAL CREDIT CARD NUMBERS DETECTED" >> pci-compliance-report.txt
          echo "Found patterns that may be credit card numbers in source code" >> pci-compliance-report.txt
        else
          echo "✅ No obvious credit card number patterns found" >> pci-compliance-report.txt
        fi

        # Check for CVV patterns (exclude test files)
        echo "" >> pci-compliance-report.txt
        echo "🔍 Scanning for CVV patterns..." >> pci-compliance-report.txt
        if grep -r -i -E "(cvv|cvc|security.code)" src/ --exclude-dir=tests --exclude-dir=test 2>/dev/null | grep -E "[0-9]{3,4}"; then
          echo "❌ POTENTIAL CVV/CVC CODES DETECTED" >> pci-compliance-report.txt
        else
          echo "✅ No obvious CVV/CVC patterns found" >> pci-compliance-report.txt
        fi

        # Check for logging practices (exclude test files and comments)
        echo "" >> pci-compliance-report.txt
        echo "🔍 Checking logging practices..." >> pci-compliance-report.txt
        if grep -r -i -E "(log|print).*\b(card\s*number|card\s*data|pan\s*data|cvv\s*data|cvc\s*data)\b" src/ --exclude-dir=tests --exclude-dir=test 2>/dev/null; then
          echo "❌ POTENTIAL PAYMENT DATA LOGGING DETECTED" >> pci-compliance-report.txt
          echo "Found logging that may expose payment data" >> pci-compliance-report.txt
        else
          echo "✅ No obvious payment data logging found" >> pci-compliance-report.txt
        fi

    - name: Upload payment security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: payment-security-${{ github.sha }}
        path: pci-compliance-report.txt
        retention-days: 30

  additional-security-report:
    name: Additional Security Summary
    runs-on: ubuntu-latest
    needs: [compliance-scan, pci-compliance-check]
    if: ${{ always() }}
    permissions:
      pull-requests: write

    steps:
    - name: Debug job status
      run: |
        echo "Job needs: compliance-scan, pci-compliance-check"
        echo "Event name: ${{ github.event_name }}"
        echo "Always condition: ${{ always() }}"
        echo "Compliance scan result: ${{ needs.compliance-scan.result }}"
        echo "PCI check result: ${{ needs.pci-compliance-check.result }}"

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true

    - name: Debug artifact download
      run: |
        echo "Listing all downloaded files:"
        find . -type f -name "*.json" -o -name "*.txt" | head -20
        echo "Current directory contents:"
        ls -la
        echo "Looking for compliance scan results:"
        find . -name "*compliance*" -type f

    - name: Generate additional security summary
      id: additional_security_summary
      run: |
        echo "ADDITIONAL_SECURITY_SUMMARY<<EOF" >> $GITHUB_OUTPUT
        echo "## 🔒 Additional Security Checks" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Security Scans Performed:" >> $GITHUB_OUTPUT
        echo "- 🔍 **Compliance Scan**: Secrets, API keys, and dependency checks" >> $GITHUB_OUTPUT
        echo "- 💳 **Payment Security**: Payment data exposure and logging checks" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT

        # Check for high-severity issues
        HIGH_SEVERITY_FOUND=false

        # Generate detailed compliance scan report
        echo "### 📊 Compliance Scan Results" >> $GITHUB_OUTPUT

        # Find compliance scan results file
        COMPLIANCE_FILE=""
        if [ -f "compliance-scan-${{ github.sha }}/compliance-scan-results.json" ]; then
          COMPLIANCE_FILE="compliance-scan-${{ github.sha }}/compliance-scan-results.json"
        elif [ -f "compliance-scan-results.json" ]; then
          COMPLIANCE_FILE="compliance-scan-results.json"
        else
          # Look for any compliance results file
          COMPLIANCE_FILE=$(find . -name "compliance-scan-results.json" -type f | head -1)
        fi

        if [ -n "$COMPLIANCE_FILE" ] && [ -f "$COMPLIANCE_FILE" ]; then
          echo "Found compliance file: $COMPLIANCE_FILE" >> $GITHUB_OUTPUT

          # Extract values using jq or grep
          if command -v jq >/dev/null 2>&1; then
            SECRETS_FOUND=$(jq -r '.summary.secrets_found' "$COMPLIANCE_FILE" 2>/dev/null || echo "0")
            PAYMENT_ISSUES=$(jq -r '.summary.payment_issues' "$COMPLIANCE_FILE" 2>/dev/null || echo "0")
            DEPENDENCY_CHECKS=$(jq -r '.summary.dependency_checks' "$COMPLIANCE_FILE" 2>/dev/null || echo "0")
            HIGH_SEVERITY=$(jq -r '.summary.high_severity' "$COMPLIANCE_FILE" 2>/dev/null || echo "0")
          else
            # Fallback to grep if jq not available
            SECRETS_FOUND=$(grep -o '"secrets_found": *[0-9]*' "$COMPLIANCE_FILE" | grep -o '[0-9]*' || echo "0")
            PAYMENT_ISSUES=$(grep -o '"payment_issues": *[0-9]*' "$COMPLIANCE_FILE" | grep -o '[0-9]*' || echo "0")
            DEPENDENCY_CHECKS=$(grep -o '"dependency_checks": *[0-9]*' "$COMPLIANCE_FILE" | grep -o '[0-9]*' || echo "0")
            HIGH_SEVERITY=$(grep -o '"high_severity": *[0-9]*' "$COMPLIANCE_FILE" | grep -o '[0-9]*' || echo "0")
          fi

          echo "- **Secrets Found**: $SECRETS_FOUND" >> $GITHUB_OUTPUT
          echo "- **Payment Issues**: $PAYMENT_ISSUES" >> $GITHUB_OUTPUT
          echo "- **Dependency Checks**: $DEPENDENCY_CHECKS" >> $GITHUB_OUTPUT
          echo "- **High Severity**: $HIGH_SEVERITY" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT

          # Show summary of findings
          if [ "$SECRETS_FOUND" -gt "0" ]; then
            echo "**🔑 Secrets Detected** - Check detailed compliance scan results" >> $GITHUB_OUTPUT
          fi

          if [ "$PAYMENT_ISSUES" -gt "0" ]; then
            echo "**💳 Payment Data Issues** - Check detailed compliance scan results" >> $GITHUB_OUTPUT
          fi

          if [ "$DEPENDENCY_CHECKS" -gt "0" ]; then
            echo "**📦 Dependency Issues** - Check detailed compliance scan results" >> $GITHUB_OUTPUT
          fi

          # Set status based on findings
          if [ "$HIGH_SEVERITY" -gt "0" ]; then
            echo "🚨 **CRITICAL: High-severity compliance issues detected**" >> $GITHUB_OUTPUT
            HIGH_SEVERITY_FOUND=true
          elif [ "$SECRETS_FOUND" -gt "0" ] || [ "$PAYMENT_ISSUES" -gt "0" ]; then
            echo "⚠️ **Compliance warnings detected - review recommended**" >> $GITHUB_OUTPUT
          else
            echo "✅ **Compliance scan: No issues detected**" >> $GITHUB_OUTPUT
          fi
        else
          echo "❌ Compliance scan results not found" >> $GITHUB_OUTPUT
        fi

        echo "" >> $GITHUB_OUTPUT

        # Generate detailed payment security report
        echo "### 💳 Payment Security Results" >> $GITHUB_OUTPUT

        # Find payment security report file
        PAYMENT_FILE=""
        if [ -f "payment-security-${{ github.sha }}/pci-compliance-report.txt" ]; then
          PAYMENT_FILE="payment-security-${{ github.sha }}/pci-compliance-report.txt"
        elif [ -f "pci-compliance-report.txt" ]; then
          PAYMENT_FILE="pci-compliance-report.txt"
        else
          # Look for any payment security report file
          PAYMENT_FILE=$(find . -name "pci-compliance-report.txt" -type f | head -1)
        fi

        if [ -n "$PAYMENT_FILE" ] && [ -f "$PAYMENT_FILE" ]; then
          echo "Found payment security file: $PAYMENT_FILE" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          cat "$PAYMENT_FILE" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT

          if grep -q "❌" "$PAYMENT_FILE" 2>/dev/null; then
            echo "🚨 **CRITICAL: Payment Security Issues Detected**" >> $GITHUB_OUTPUT
            HIGH_SEVERITY_FOUND=true
          else
            echo "✅ **Payment security: No issues detected**" >> $GITHUB_OUTPUT
          fi
        else
          echo "❌ Payment security scan results not found" >> $GITHUB_OUTPUT
        fi

        echo "" >> $GITHUB_OUTPUT
        if [ "$HIGH_SEVERITY_FOUND" = "true" ]; then
          echo "### 🚨 CRITICAL ISSUES REQUIRE IMMEDIATE ATTENTION" >> $GITHUB_OUTPUT
          echo "High-severity security issues detected. **DO NOT MERGE** until resolved." >> $GITHUB_OUTPUT
          echo "additional_security_status=critical" >> $GITHUB_OUTPUT
        else
          echo "### ✅ Additional Security Status: CLEAN" >> $GITHUB_OUTPUT
          echo "No high-severity security issues detected in additional scans." >> $GITHUB_OUTPUT
          echo "additional_security_status=passed" >> $GITHUB_OUTPUT
        fi

        echo "" >> $GITHUB_OUTPUT
        echo "---" >> $GITHUB_OUTPUT
        echo "*Additional security scan completed for commit ${{ github.sha }} at $(date -u)*" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Clean up old additional security reports
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          // Delete ALL existing additional security-related comments
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const additionalSecurityComments = comments.filter(comment =>
            comment.body.includes('Additional Security Checks') ||
            comment.body.includes('Compliance Scan') ||
            comment.body.includes('Payment Security') ||
            comment.body.includes('GitLeaks') ||
            comment.body.includes('PCI')
          );

          console.log(`Found ${additionalSecurityComments.length} old additional security comments to delete`);

          // Delete all existing additional security comments
          for (const comment of additionalSecurityComments) {
            try {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
              });
              console.log(`Deleted additional security comment ${comment.id}`);
            } catch (error) {
              console.log(`Could not delete additional security comment ${comment.id}: ${error.message}`);
            }
          }

    - name: Comment PR with additional security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const additionalSecuritySummary = `${{ steps.additional_security_summary.outputs.ADDITIONAL_SECURITY_SUMMARY }}`;
          const additionalSecurityStatus = '${{ steps.additional_security_summary.outputs.additional_security_status }}';

          console.log(`Additional Security Status: ${additionalSecurityStatus}`);
          console.log(`Additional Security Summary Length: ${additionalSecuritySummary.length}`);

          // Create new comment
          const comment = await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: additionalSecuritySummary
          });

          console.log(`Created additional security comment with ID: ${comment.data.id}`);