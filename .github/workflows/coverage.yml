name: Code Coverage

on:
  pull_request:
    branches: [main, master, develop]
  push:
    branches: [main, master, develop, 'feat/**']

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  coverage:
    name: Coverage Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper diff coverage

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]
        pip install requests coverage-badge diff-cover

    - name: Run tests with coverage
      run: |
        pytest --cov=src --cov-branch --cov-report=xml --cov-report=term --cov-report=html --cov-report=json || true

    - name: Generate detailed coverage report
      id: detailed_coverage
      run: |
        # Generate detailed module coverage table
        echo "COVERAGE_DETAILS<<EOF" >> $GITHUB_OUTPUT
        python .github/scripts/generate_coverage_report.py
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Generate coverage badge
      run: |
        coverage-badge -o coverage.svg -f

    - name: Check overall coverage
      id: coverage_check
      run: |
        # Extract overall coverage from XML report
        OVERALL_COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(int(float(root.get('line-rate', 0)) * 100))")

        echo "overall_coverage=$OVERALL_COVERAGE" >> $GITHUB_OUTPUT
        echo "Overall coverage: $OVERALL_COVERAGE%"

        # Check if overall coverage meets 90% threshold
        if [ "$OVERALL_COVERAGE" -lt "90" ]; then
          echo "‚ùå Overall coverage is below 90% threshold ($OVERALL_COVERAGE%)"
          echo "coverage_status=failed" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "‚úÖ Overall coverage meets 90% threshold ($OVERALL_COVERAGE%)"
          echo "coverage_status=passed" >> $GITHUB_OUTPUT
        fi


    - name: Comment PR with coverage report
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && github.event.action != 'closed'
      with:
        script: |
          const overallCoverage = '${{ steps.coverage_check.outputs.overall_coverage }}' || 'N/A';
          const coverageStatus = '${{ steps.coverage_check.outputs.coverage_status }}';

          const statusEmoji = coverageStatus === 'passed' ? '‚úÖ' : '‚ùå';
          const statusText = coverageStatus === 'passed' ? 'PASSED' : 'FAILED';

          const coverageDetails = `${{ steps.detailed_coverage.outputs.COVERAGE_DETAILS }}`;

          const comment = `## ${statusEmoji} Coverage Report

**Overall Coverage: ${overallCoverage}%** ${coverageStatus === 'passed' ? '(‚úÖ Passed)' : '(‚ùå Below 90% threshold)'}

### Coverage Details

${coverageDetails}

${coverageStatus === 'failed' ?
'> **‚ö†Ô∏è Action Required**\\n> Coverage is below the 90% threshold. Please add tests to improve coverage.' :
'> **‚úÖ Excellent!**\\n> Your code meets the coverage requirements.'}

<details>
<summary>üìä Want to see the full HTML report?</summary>

The detailed HTML coverage report is available in the [workflow artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).

</details>

---
*Report generated for [\`${context.sha.substring(0, 7)}\`](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha}) ‚Ä¢ ${new Date().toISOString()}*`;

          // Find and delete existing coverage comments
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComments = comments.filter(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('Coverage Report')
          );

          // Delete all existing coverage comments
          for (const botComment of botComments) {
            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
            });
          }

          // Create new comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });

    - name: Display coverage summary for push events
      if: github.event_name == 'push'
      run: |
        echo "## üìä Coverage Summary for Push Event" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Coverage:** ${{ steps.coverage_check.outputs.overall_coverage }}%" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ steps.coverage_check.outputs.coverage_status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Details" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.detailed_coverage.outputs.COVERAGE_DETAILS }}" >> $GITHUB_STEP_SUMMARY

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-${{ github.sha }}
        path: |
          coverage.xml
          coverage.json
          htmlcov/
          coverage.svg
        retention-days: 30

    - name: Add coverage check status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const overallCoverage = '${{ steps.coverage_check.outputs.overall_coverage }}' || '0';
          const status = '${{ steps.coverage_check.outputs.coverage_status }}' === 'passed' ? 'success' : 'failure';

          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Code Coverage Quality Gate',
            head_sha: context.sha,
            status: 'completed',
            conclusion: status,
            output: {
              title: `Overall Coverage: ${overallCoverage}%`,
              summary: status === 'success'
                ? `‚úÖ Overall coverage (${overallCoverage}%) meets the 90% threshold`
                : `‚ùå Overall coverage (${overallCoverage}%) is below the 90% threshold`,
            }
          });