name: Code Coverage

on:
  pull_request:
    branches: [main, master, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  coverage:
    name: Coverage Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper diff coverage

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]
        pip install requests coverage-badge diff-cover

    - name: Run tests with coverage
      run: |
        pytest --cov=src --cov-report=xml --cov-report=term --cov-report=html || true

    - name: Generate coverage badge
      run: |
        coverage-badge -o coverage.svg -f

    - name: Check overall coverage
      id: coverage_check
      run: |
        # Extract overall coverage from XML report
        OVERALL_COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(int(float(root.get('line-rate', 0)) * 100))")

        echo "overall_coverage=$OVERALL_COVERAGE" >> $GITHUB_OUTPUT
        echo "Overall coverage: $OVERALL_COVERAGE%"

        # Check if overall coverage meets 90% threshold
        if [ "$OVERALL_COVERAGE" -lt "90" ]; then
          echo "❌ Overall coverage is below 90% threshold ($OVERALL_COVERAGE%)"
          echo "coverage_status=failed" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "✅ Overall coverage meets 90% threshold ($OVERALL_COVERAGE%)"
          echo "coverage_status=passed" >> $GITHUB_OUTPUT
        fi


    - name: Comment PR with coverage report
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const overallCoverage = '${{ steps.coverage_check.outputs.overall_coverage }}' || 'N/A';
          const coverageStatus = '${{ steps.coverage_check.outputs.coverage_status }}';

          const statusEmoji = coverageStatus === 'passed' ? '✅' : '❌';
          const statusText = coverageStatus === 'passed' ? 'PASSED' : 'FAILED';

          const comment = `## ${statusEmoji} Coverage Report

          ### Summary
          - **Overall Coverage:** ${overallCoverage}% (Minimum required: 90%)
          - **Status:** ${statusText}

          ${coverageStatus === 'failed' ? '### ⚠️ Action Required\nPlease add tests to ensure overall coverage is at least 90%.' : '### ✨ Great job!\nYour code meets the coverage requirements.'}

          ---
          *Coverage report generated for commit ${context.sha.substring(0, 7)}*`;

          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('Coverage Report')
          );

          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
          coverage.svg

    - name: Add coverage check status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const overallCoverage = '${{ steps.coverage_check.outputs.overall_coverage }}' || '0';
          const status = '${{ steps.coverage_check.outputs.coverage_status }}' === 'passed' ? 'success' : 'failure';

          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Code Coverage Quality Gate',
            head_sha: context.sha,
            status: 'completed',
            conclusion: status,
            output: {
              title: `Overall Coverage: ${overallCoverage}%`,
              summary: status === 'success'
                ? `✅ Overall coverage (${overallCoverage}%) meets the 90% threshold`
                : `❌ Overall coverage (${overallCoverage}%) is below the 90% threshold`,
            }
          });