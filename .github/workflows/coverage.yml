name: Code Coverage

on:
  pull_request:
    branches: [main, master, develop]
  push:
    branches: [main, master, develop, 'feat/**']

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  coverage:
    name: Coverage Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper diff coverage

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]
        pip install requests coverage-badge diff-cover

    - name: Run tests with coverage
      run: |
        pytest --cov=src --cov-branch --cov-report=xml --cov-report=term --cov-report=html --cov-report=json || true

    - name: Generate detailed coverage report
      id: detailed_coverage
      run: |
        # Generate detailed module coverage table
        echo "COVERAGE_DETAILS<<EOF" >> $GITHUB_OUTPUT
        python -c "
        import json
        import xml.etree.ElementTree as ET

        try:
            # Read JSON for detailed data
            with open('coverage.json') as f:
                json_data = json.load(f)

            # Read XML for line numbers
            xml_tree = ET.parse('coverage.xml')
            xml_root = xml_tree.getroot()

            # Create mapping from XML
            xml_files = {}
            for pkg in xml_root.findall('.//package'):
                for cls in pkg.findall('classes/class'):
                    filename = cls.get('filename', '')
                    lines = cls.findall('lines/line')
                    uncovered = [line.get('number') for line in lines if line.get('hits') == '0']
                    xml_files[filename] = uncovered

            print('| File | Statements | Branches | Functions | Lines | Uncovered Lines |')
            print('|------|------------|----------|-----------|-------|-----------------|')

            files = json_data.get('files', {})
            totals = json_data.get('totals', {})

            # Sort files by path for consistent ordering
            sorted_files = sorted(files.items())

            for filepath, file_data in sorted_files:
                if filepath.startswith('src/paymcp/'):
                    # Clean file path for display
                    display_path = filepath.replace('src/paymcp/', '')

                    summary = file_data.get('summary', {})

                    # Get coverage percentages
                    num_statements = summary.get('num_statements', 0)
                    covered_statements = summary.get('covered_statements', 0)
                    missing_statements = summary.get('missing_statements', 0)

                    num_branches = summary.get('num_branches', 0)
                    covered_branches = summary.get('covered_branches', 0)
                    missing_branches = summary.get('missing_branches', 0)

                    # Calculate percentages
                    stmt_pct = round((covered_statements / num_statements * 100) if num_statements > 0 else 100, 1)
                    branch_pct = round((covered_branches / num_branches * 100) if num_branches > 0 else 100, 1)

                    # For Python, functions and lines are typically the same as statements
                    func_pct = stmt_pct  # Python doesn't separate functions in coverage.py
                    line_pct = round(summary.get('percent_covered', 0), 1)

                    # Get uncovered lines
                    missing_lines = file_data.get('missing_lines', [])
                    if missing_lines:
                        # Group consecutive lines into ranges
                        ranges = []
                        start = missing_lines[0]
                        end = start

                        for line in missing_lines[1:]:
                            if line == end + 1:
                                end = line
                            else:
                                if start == end:
                                    ranges.append(str(start))
                                else:
                                    ranges.append(f'{start}-{end}')
                                start = end = line

                        if start == end:
                            ranges.append(str(start))
                        else:
                            ranges.append(f'{start}-{end}')

                        uncovered_display = ', '.join(ranges) if len(ranges) <= 5 else f'{ranges[0]}, {ranges[1]}, ... ({len(missing_lines)} lines)'
                    else:
                        uncovered_display = '-'

                    # Format percentages
                    stmt_display = f'{stmt_pct}%' if stmt_pct < 100 else '💯'
                    branch_display = f'{branch_pct}%' if branch_pct < 100 else '💯'
                    func_display = f'{func_pct}%' if func_pct < 100 else '💯'
                    line_display = f'{line_pct}%' if line_pct < 100 else '💯'

                    print(f'| {display_path} | {stmt_display} | {branch_display} | {func_display} | {line_display} | {uncovered_display} |')

            # Add totals row
            total_stmt_pct = round(totals.get('percent_covered', 0), 1)
            print(f'| **TOTAL** | **{total_stmt_pct}%** | **{total_stmt_pct}%** | **{total_stmt_pct}%** | **{total_stmt_pct}%** | - |')

        except Exception as e:
            print('| File | Error |')
            print('|------|-------|')
            print(f'| Coverage Report | Error: {str(e)} |')
        " >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Generate coverage badge
      run: |
        coverage-badge -o coverage.svg -f

    - name: Check overall coverage
      id: coverage_check
      run: |
        # Extract overall coverage from XML report
        OVERALL_COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(int(float(root.get('line-rate', 0)) * 100))")

        echo "overall_coverage=$OVERALL_COVERAGE" >> $GITHUB_OUTPUT
        echo "Overall coverage: $OVERALL_COVERAGE%"

        # Check if overall coverage meets 90% threshold
        if [ "$OVERALL_COVERAGE" -lt "90" ]; then
          echo "❌ Overall coverage is below 90% threshold ($OVERALL_COVERAGE%)"
          echo "coverage_status=failed" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "✅ Overall coverage meets 90% threshold ($OVERALL_COVERAGE%)"
          echo "coverage_status=passed" >> $GITHUB_OUTPUT
        fi


    - name: Comment PR with coverage report
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && github.event.action != 'closed'
      with:
        script: |
          const overallCoverage = '${{ steps.coverage_check.outputs.overall_coverage }}' || 'N/A';
          const coverageStatus = '${{ steps.coverage_check.outputs.coverage_status }}';

          const statusEmoji = coverageStatus === 'passed' ? '✅' : '❌';
          const statusText = coverageStatus === 'passed' ? 'PASSED' : 'FAILED';

          const coverageDetails = `${{ steps.detailed_coverage.outputs.COVERAGE_DETAILS }}`;

          const comment = `## ${statusEmoji} Coverage Report

**Overall Coverage: ${overallCoverage}%** ${coverageStatus === 'passed' ? '(✅ Passed)' : '(❌ Below 90% threshold)'}

### Coverage Details

${coverageDetails}

${coverageStatus === 'failed' ?
'> **⚠️ Action Required**\\n> Coverage is below the 90% threshold. Please add tests to improve coverage.' :
'> **✅ Excellent!**\\n> Your code meets the coverage requirements.'}

<details>
<summary>📊 Want to see the full HTML report?</summary>

The detailed HTML coverage report is available in the [workflow artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).

</details>

---
*Report generated for [\`${context.sha.substring(0, 7)}\`](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha}) • ${new Date().toISOString()}*`;

          // Find and delete existing coverage comments
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComments = comments.filter(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('Coverage Report')
          );

          // Delete all existing coverage comments
          for (const botComment of botComments) {
            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
            });
          }

          // Create new comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });

    - name: Display coverage summary for push events
      if: github.event_name == 'push'
      run: |
        echo "## 📊 Coverage Summary for Push Event" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Coverage:** ${{ steps.coverage_check.outputs.overall_coverage }}%" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ steps.coverage_check.outputs.coverage_status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Details" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.detailed_coverage.outputs.COVERAGE_DETAILS }}" >> $GITHUB_STEP_SUMMARY

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-${{ github.sha }}
        path: |
          coverage.xml
          coverage.json
          htmlcov/
          coverage.svg
        retention-days: 30

    - name: Add coverage check status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const overallCoverage = '${{ steps.coverage_check.outputs.overall_coverage }}' || '0';
          const status = '${{ steps.coverage_check.outputs.coverage_status }}' === 'passed' ? 'success' : 'failure';

          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Code Coverage Quality Gate',
            head_sha: context.sha,
            status: 'completed',
            conclusion: status,
            output: {
              title: `Overall Coverage: ${overallCoverage}%`,
              summary: status === 'success'
                ? `✅ Overall coverage (${overallCoverage}%) meets the 90% threshold`
                : `❌ Overall coverage (${overallCoverage}%) is below the 90% threshold`,
            }
          });