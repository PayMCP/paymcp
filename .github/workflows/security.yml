name: Security Scanning

on:
  push:
    branches: [main, master, develop, 'feat/**']
  pull_request:
    branches: [main, master, develop]
  schedule:
    # Run weekly security scans on main branch
    - cron: '0 2 * * 1'

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  codeql:
    name: CodeQL Analysis (Native)
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['python']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  compliance-scan:
    name: Payment Security & Compliance
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Payment data security assessment
      run: |
        echo "=== Payment Security Assessment ===" > pci-compliance-report.txt
        echo "Checking for payment data security best practices..." >> pci-compliance-report.txt
        echo "" >> pci-compliance-report.txt

        # Check for hardcoded payment data patterns (exclude test files)
        echo "🔍 Scanning for hardcoded payment data..." >> pci-compliance-report.txt
        if grep -r -i -E "(4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|3[0-9]{13}|6(?:011|5[0-9]{2})[0-9]{12})" src/ --exclude-dir=tests --exclude-dir=test 2>/dev/null; then
          echo "❌ POTENTIAL CREDIT CARD NUMBERS DETECTED" >> pci-compliance-report.txt
        else
          echo "✅ No obvious credit card number patterns found" >> pci-compliance-report.txt
        fi

        echo "" >> pci-compliance-report.txt
        echo "🔍 Scanning for CVV patterns..." >> pci-compliance-report.txt
        if grep -r -i -E "(cvv|cvc|security.code)" src/ --exclude-dir=tests --exclude-dir=test 2>/dev/null | grep -E "[0-9]{3,4}"; then
          echo "❌ POTENTIAL CVV/CVC CODES DETECTED" >> pci-compliance-report.txt
        else
          echo "✅ No obvious CVV/CVC patterns found" >> pci-compliance-report.txt
        fi

        echo "" >> pci-compliance-report.txt
        echo "🔍 Checking logging practices..." >> pci-compliance-report.txt
        if grep -r -i -E "(log|print).*\\b(card\\s*number|card\\s*data|pan\\s*data|cvv\\s*data|cvc\\s*data)\\b" src/ --exclude-dir=tests --exclude-dir=test 2>/dev/null; then
          echo "❌ POTENTIAL PAYMENT DATA LOGGING DETECTED" >> pci-compliance-report.txt
        else
          echo "✅ No obvious payment data logging found" >> pci-compliance-report.txt
        fi

    - name: Upload compliance scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: compliance-scan-${{ github.sha }}
        path: pci-compliance-report.txt
        retention-days: 30

  security-report:
    name: Security Report Summary
    runs-on: ubuntu-latest
    needs: [codeql, compliance-scan]
    if: always()
    permissions:
      pull-requests: write
      checks: write

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true

    - name: Generate security summary
      id: security_summary
      run: |
        echo "SECURITY_SUMMARY<<EOF" >> $GITHUB_OUTPUT
        echo "## 🔒 Security Scanning Results (Pure Native GitHub Actions)" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Native GitHub Actions Only:" >> $GITHUB_OUTPUT
        echo "- ✅ **CodeQL Analysis** (Native GitHub SAST with security-extended queries)" >> $GITHUB_OUTPUT
        echo "- ✅ **Payment Security Assessment** (Custom compliance checks for PCI/payment data)" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 🔍 View Detailed Results:" >> $GITHUB_OUTPUT
        echo "- **CodeQL Security Issues**: [Security Tab](https://github.com/${{ github.repository }}/security/code-scanning) - View specific vulnerabilities, locations, and fix recommendations" >> $GITHUB_OUTPUT
        echo "- **Secret Scanning Alerts**: [Secret Scanning Tab](https://github.com/${{ github.repository }}/security/secret-scanning) - View detected secrets in commits" >> $GITHUB_OUTPUT
        echo "- **Dependency Alerts**: [Dependabot Tab](https://github.com/${{ github.repository }}/security/dependabot) - View vulnerable dependencies with upgrade paths" >> $GITHUB_OUTPUT
        echo "- **Security Overview**: [Security Tab](https://github.com/${{ github.repository }}/security) - Comprehensive security dashboard" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Native Features Automatically Enabled:" >> $GITHUB_OUTPUT
        echo "- 🔍 **Secret Scanning** (Automatic detection of secrets in commits)" >> $GITHUB_OUTPUT
        echo "- 🛡️ **Dependency Alerts** (Automatic vulnerability notifications)" >> $GITHUB_OUTPUT
        echo "- 📊 **Security Advisory Database** (GitHub's vulnerability database)" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT

        # Check for high-severity issues
        HIGH_SEVERITY_FOUND=false

        # Check payment security results
        PAYMENT_FILE=""
        if [ -f "compliance-scan-${{ github.sha }}/pci-compliance-report.txt" ]; then
          PAYMENT_FILE="compliance-scan-${{ github.sha }}/pci-compliance-report.txt"
        elif [ -f "pci-compliance-report.txt" ]; then
          PAYMENT_FILE="pci-compliance-report.txt"
        fi

        if [ -n "$PAYMENT_FILE" ] && [ -f "$PAYMENT_FILE" ]; then
          echo "### 💳 Payment Security Assessment" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          cat "$PAYMENT_FILE" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT

          if grep -q "❌" "$PAYMENT_FILE" 2>/dev/null; then
            HIGH_SEVERITY_FOUND=true
          fi
        fi

        if [ "$HIGH_SEVERITY_FOUND" = "true" ]; then
          echo "" >> $GITHUB_OUTPUT
          echo "### ⚠️ Action Required" >> $GITHUB_OUTPUT
          echo "Security issues detected in payment security assessment. Please review and address before merging." >> $GITHUB_OUTPUT
          echo "security_status=warning" >> $GITHUB_OUTPUT
        else
          echo "" >> $GITHUB_OUTPUT
          echo "### ✅ Security Status" >> $GITHUB_OUTPUT
          echo "All security scans completed successfully using pure native GitHub Actions." >> $GITHUB_OUTPUT
          echo "security_status=passed" >> $GITHUB_OUTPUT
        fi

        echo "" >> $GITHUB_OUTPUT
        echo "### 🎯 Pure Native Benefits:" >> $GITHUB_OUTPUT
        echo "- **Zero Dependencies**: Only GitHub's own actions" >> $GITHUB_OUTPUT
        echo "- **Maximum Integration**: All results in GitHub Security tab" >> $GITHUB_OUTPUT
        echo "- **Always Updated**: GitHub maintains all scanning engines" >> $GITHUB_OUTPUT
        echo "- **Fastest Performance**: Optimized for GitHub infrastructure" >> $GITHUB_OUTPUT
        echo "- **No Configuration**: Works out of the box" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "---" >> $GITHUB_OUTPUT
        echo "*Security scan completed for commit ${{ github.sha }} at $(date -u)*" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Clean up old security reports
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const securityComments = comments.filter(comment =>
            comment.body.includes('Security Scanning Results') ||
            comment.body.includes('Native GitHub Actions') ||
            comment.body.includes('Pure Native')
          );

          for (const comment of securityComments) {
            try {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
              });
            } catch (error) {
              console.log(`Could not delete comment ${comment.id}: ${error.message}`);
            }
          }

    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: process.env.SECURITY_SUMMARY
          });
      env:
        SECURITY_SUMMARY: ${{ steps.security_summary.outputs.SECURITY_SUMMARY }}

    - name: Add security check status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const securityStatus = process.env.SECURITY_STATUS;
          const actualStatus = securityStatus === 'warning' || securityStatus === 'failed' ? 'failure' : 'success';
          const title = actualStatus === 'success' ? 'Security Scans Passed (Pure Native)' : 'Security Issues Detected';

          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Security Scanning Quality Gate',
            head_sha: context.sha,
            status: 'completed',
            conclusion: actualStatus,
            output: {
              title: title,
              summary: actualStatus === 'success'
                ? '✅ All pure native GitHub security scans passed'
                : '⚠️ Security issues detected in native scans',
            }
          });
      env:
        SECURITY_STATUS: ${{ steps.security_summary.outputs.security_status }}